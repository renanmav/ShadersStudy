// kind=shader

// uniforms
uniform float4 colors[4];
uniform float2 center;
uniform float radius;
uniform float strokeWidth;
uniform float2 pointer;
uniform float clock;

float4 black = float4(0, 0, 0, 1);

struct Paint {
    float4 color;
    bool stroke;
    float strokeWidth;
};

float4 draw(float4 color, float d, Paint paint) {
    bool isFill = paint.stroke == false && d < 0;
    bool isStroke = paint.stroke == true && abs(d) <= paint.strokeWidth / 2;
    if (isFill || isStroke) {
        return paint.color;
    }
    return color;
}

// Signed distance of a circle
float sdCircle(float2 p, float r) {
    return length(p) - r;
}

// Signed distance of a line
float sdLine(vec2 p, vec2 a, vec2 b) {
    vec2 pa = p - a;
    vec2 ba = b - a;
    float h = saturate(dot(pa, ba) / dot(ba, ba));
    return length(pa - ba * h);
}

// Draw circle
float4 drawCircle(float4 color, float2 p, float r, Paint paint) {
    float d = sdCircle(p, paint.stroke ? r - paint.strokeWidth / 2 : r);
    return draw(color, d, paint);
}

// Draw line
float4 drawLine(float4 color, float2 pos, float2 a, float2 b, Paint paint) {
    float d = sdLine(pos, a, b);
    return draw(color, d, paint);
}

vec4 main(vec2 xy) {
    float4 color = black;
    float d = sdLine(xy, center, pointer);
    float i = mod(floor((d + clock * -0.1) / strokeWidth), 4);

    if (i == 0) {
        color = colors[0];
    } else if (i == 1) {
        color = colors[1];
    } else if (i == 2) {
        color = colors[2];
    } else if (i == 3) {
        color = colors[3];
    }

    return color;
}
